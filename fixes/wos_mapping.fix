# publication type
# set default type
add_field(_r.status,new)
add_field(_r.type,journal_article)
if all_match(DT,'Book Review')
  set_field(_r.type,review)
end
if all_match(DT,'Meeting Abstract')
  set_field(_r.type,conference_abstract)
end
if all_match(DT,'Review; Book Chapter')
  set_field(_r.type,review)
end
if all_match(DT,'Proceedings Paper')
  set_field(_r.type,conference)
end
if all_match(DT,'Book Chapter')
  set_field(_r.type,book_chapter)
end

if all_match(DT,'Article')
  set_field(_r.article_type,original)
end
if all_match(DT,'Letter')
  set_field(_r.article_type,letter_note)
end
if all_match(DT,'Review')
  set_field(_r.article_type,review)
end
if all_match(DT,'Editorial Material')
  set_field(_r.article_type,letter_note)
end

add_field(_r.isi,1)
add_field(_r.quality_controlled,1)
add_field(_r.publication_status,published)

# set default status and creator
add_field(_r.status, new)
add_field(_r.creator.login, 'Admin_WoS_Import')

if exists(AF)
  move_field(AF, _r.author.$append)
else
  move_field(AU, _r.author.$append)
end
flatten(_r.author)
replace_all(_r.author.*,"^","full_name:")
split_field(_r.author.*,":")
hash(_r.author.*)

# authors
do list (path => _r.author)
  do identity ()
    copy_field('full_name','last_name')
    replace_all('last_name','^(.*),.*','$1')
    copy_field('full_name', 'first_name')
    replace_all('first_name', '.*,\s(.*)$','$1')
  end
end

move_field(TI,_r.title)
join_field(_r.title,' ')
#capitalize(_r.title)

#abstract
if exists (AB)
  join_field(AB,' ')
  move_field(AB,_r.abstract.0.text)
  add_field(_r.abstract.0.lang,eng)
end

move_field(DE,_r.keyword.$append)
flatten(_r.keyword)
split_field(_r.keyword.*, ';')
flatten(_r.keyword)
trim(_r.keyword.*)

move_field('DI','_r.doi')

# use maybe lookup via issn in crossref journal list
move_field('SO','_r.publication')
join_field(_r.publication,' ')
#split_field(_r.publication,' ')
#capitalize(_r.publication.*)
#join_field(_r.publication,' ')

move_field(SN,'_r.publication_identifier.issn.0')
move_field(EI,'_r.publication_identifier.eissn.0')
replace_all(UT,'^WOS:','')
move_field(UT,_r.external_id.isi.$append)
if exists(PM)
  move_field(PM,_r.external_id.pmid.$append)
  add_field(_r.pmid,1)
end
move_field(VL,_r.volume)
move_field(IS,_r.issue)
move_field(SE,_r.series_title)
move_field(PY,_r.year)

#if exists(PG)
#  move_field(PG, _r.page)
#end
if exists(BP)
  move_field(BP,_r.page.$append)
  move_field(EP,_r.page.$append)
  uniq(_r.page)
  join_field(_r.page, -)
end

move_field(AR,_r.article_number)

split_field(BN,'; ')
move_field(BN.*,'_r.publication_identifier.isbn.$append')
move_field(PU,_r.publisher)
split_field(_r.publisher,' ')
capitalize(_r.publisher.*)
join_field(_r.publisher,' ')
move_field(PI,_r.place)
capitalize(_r.place)

# conference
move_field(CT,_r.conference.name)
move_field(CY,_r.conference.date)
move_field(CL,_r.conference.location)
join_field(_r.conference.name, ' ')

# message
timestamp(timestamp)
datetime_format(timestamp, source_pattern: '%s', destination_pattern:    '%Y-%m-%d',)
move_field(timestamp, _r.message.$append)
prepend(_r.message.0, 'WoS Import ')

upcase(LA)
lookup(LA, fixes/lookup/wos_lang_iso.csv, default: eng)
move_field(LA, _r.language.$append.iso)

if exists(FU)
  move_field(FU, _r.message.$append)
  prepend(_r.message.$last, 'Funder: ')
end
if exists(OA)
  move_field(OA, _r.message.$append)
  prepend(_r.message.$last, 'OA: ')
end
join_field(_r.message, ' / ')

retain_field(_r)
move_field(_r, .)

vacuum()
